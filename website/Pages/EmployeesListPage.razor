@page "/"
@inject HttpClient http
@inject NavigationManager NavigationManager

<PageTitle>Daftar Karyawan</PageTitle>


<div class="mt-4 container">
    <div class="card">
        <div class="card-body">
            <table class="table-hover table">
                <thead class="table-light">
                    <tr>
                        <th scope="col">NIK</th>
                        <th scope="col">Nama</th>
                        <th scope="col">Tempat Lahir</th>
                        <th scope="col">Aksi</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employee in CurrentPageEmployees)
                    {
                        <tr>
                            <td>@employee.NIK</td>
                            <td>@employee.Name</td>
                            <td>@employee.BirthCity</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="/employees/edit/@employee.Id" class="btn btn-sm btn-primary me-2">
                                        <i class="bi bi-pencil-fill"></i> Edit
                                    </a>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="e => HandleDelete(employee.Id)">
                                        <i class="bi bi-trash-fill"></i> Hapus
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-between align-items-center mt-3">
                <div>
                    <span class="me-2">Rows per page:</span>
                    <select class="form-select form-select-sm d-inline-block w-auto" @bind="PageSize">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                    </select>
                </div>

                <nav aria-label="Page navigation">
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => NavigateToPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                                Previous
                            </button>
                        </li>

                        @for (int i = StartPage; i <= EndPage; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(pageNumber == CurrentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => NavigateToPage(pageNumber)">
                                    @pageNumber
                                </button>
                            </li>
                        }

                        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => NavigateToPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                                Next
                            </button>
                        </li>
                    </ul>
                </nav>

                <div>
                    <span>Showing @StartIndex - @EndIndex of @TotalItems items</span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private Employee[]? allEmployees = [];

    private int CurrentPage = 1;
    private int PageSize = 10;

    // Properties to handle pagination calculations
    private int TotalItems => allEmployees != null ? allEmployees.Length : 0;
    private int TotalPages => (int)Math.Ceiling(TotalItems / (double)PageSize);
    private int StartPage => Math.Max(1, CurrentPage - 2);
    private int EndPage => Math.Min(TotalPages, CurrentPage + 2);
    private int StartIndex => (CurrentPage - 1) * PageSize + 1;
    private int EndIndex => Math.Min(CurrentPage * PageSize, TotalItems);

    private IEnumerable<Employee> CurrentPageEmployees =>
        allEmployees
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);

    protected override async Task OnInitializedAsync()
    {
        allEmployees = await http.GetFromJsonAsync<Employee[]>("api/employees");
    }

    private async Task HandleDelete(string employeeId) {
        await http.DeleteAsync($"api/employees/{employeeId}");

        NavigationManager.Refresh();
    }

    private void NavigateToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
        }
    }

    // This method is called when the page size dropdown value changes
    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            PageSize = newSize;
            CurrentPage = 1; // Reset to first page when changing page size
        }
    }
}