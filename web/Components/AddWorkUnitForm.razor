@inject HttpClient http
@inject NavigationManager NavigationManager

<EditForm EditContext="editContext" FormName="AddWorkUnit" OnValidSubmit="Submit">
	<div class="mb-3">
		<label for="name" class="form-label">Nama Unit</label>
		<input class="form-control" id="name" placeholder="contoh: IT, Finance, Marketing" @bind-value="FormData!.Name">
		<ValidationMessage For="() => FormData!.Name" />
	</div>

	<div>
		<button type="submit" class="btn btn-primary">
			Tambah Unit Kerja
		</button>
	</div>
</EditForm>

@code {

	[SupplyParameterFromForm]
	private AddWorkUnitFormData? FormData { get; set; }

	private EditContext? editContext { get; set; }

	private ValidationMessageStore? messageStore;

	protected override void OnInitialized() {
		FormData ??= new();
		editContext = new(FormData);

		editContext.OnValidationRequested += HandleValidationRequested;

		messageStore = new(editContext);
	}

	private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
	{
		messageStore?.Clear();

		if (string.IsNullOrEmpty(FormData!.Name)) {
			messageStore?.Add(() => FormData.Name, "Nama unit kerja diperlukan");
		}
	}

	private async Task Submit() {
		var res = await http.PostAsJsonAsync("api/units", FormData);

		if (!res.IsSuccessStatusCode) return;

		NavigationManager.NavigateTo("/units");
	}

	public class AddWorkUnitFormData {
		
		public string? Name { get; set; }
	}

}
